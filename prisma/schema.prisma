// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  username    String    @unique
  email       String    @unique
  password    String
  role        String    @default("customer")
  // Seller specific fields
  isSeller    Boolean   @default(false)
  name        String? // For seller profile
  phoneNumber String? // For seller profile
  isVerified  Boolean   @default(false)
  products    Product[]
  createdAt   DateTime  @default(now())
  orders      Order[]
  Cart        Cart?
  refreshTokens RefreshToken[]
}

model Product {
  id          Int            @id @default(autoincrement())
  title       String
  category    String
  breed       String
  age         String
  gender      String
  weight      Float
  price       Float
  location    String
  description String
  imageUrl    String
  videoUrl    String
  seller      User           @relation(fields: [sellerId], references: [id])
  sellerId    Int
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  orders      OrderProduct[]
  CartItem    CartItem[]
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id])
  userId    Int        @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
}

model Order {
  id              Int            @id @default(autoincrement())
  user            User           @relation(fields: [userId], references: [id])
  userId          Int
  totalPrice      Float
  status          String         @default("pending") // pending, processing, paid, failed, delivered
  paymentId       String? // Interswitch payment reference
  paymentStatus   String? // success, failed, pending
  deliveryAddress String?
  phoneNumber     String?
  products        OrderProduct[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model OrderProduct {
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int

  @@id([orderId, productId])
  @@unique([orderId, productId])
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([token])
  @@index([userId])
}
