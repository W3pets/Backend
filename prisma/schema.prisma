// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int            @id @default(autoincrement())
  email             String         @unique
  password          String
  role              String         @default("customer")
  isSeller          Boolean        @default(false)
  businessName      String?        
  phoneNumber       String?        
  address           String?        
  city              String?        
  state             String?        
  location          String?        // For map coordinates
  description       String?        // Seller description
  profileImage      String?        
  identityDocument  String?        
  verificationStatus String?       
  isVerified        Boolean        @default(false)
  products      Product[]
  createdAt     DateTime       @default(now())
  orders        Order[]
  Cart          Cart?
  refreshTokens RefreshToken[]
  // Messaging relations
  customerConversations Conversation[] @relation("CustomerConversations")
  sellerConversations   Conversation[] @relation("SellerConversations")
  sentMessages         Message[]
}

model Product {
  id          Int            @id @default(autoincrement())
  title       String
  category    String
  breed       String
  age         String
  gender      String
  weight      Float
  price       Float
  location    String
  description String
  imageUrl    String
  videoUrl    String
  seller      User           @relation(fields: [sellerId], references: [id])
  sellerId    Int
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  orders      OrderProduct[]
  CartItem    CartItem[]
  views       ProductView[]
  conversations Conversation[]
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id])
  userId    Int        @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
}

model Order {
  id              Int            @id @default(autoincrement())
  user            User           @relation(fields: [userId], references: [id])
  userId          Int
  totalPrice      Float
  status          String         @default("pending") // pending, processing, paid, failed, delivered
  paymentId       String? // Interswitch payment reference
  paymentStatus   String? // success, failed, pending
  deliveryAddress String?
  phoneNumber     String?
  products        OrderProduct[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model OrderProduct {
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int     @default(1)
  price     Float   // Price at time of purchase

  @@id([orderId, productId])
  @@unique([orderId, productId])
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([token])
  @@index([userId])
}

model ProductView {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@index([productId])
  @@index([createdAt])
}

// Messaging Models
model Conversation {
  id        Int      @id @default(autoincrement())
  customer  User     @relation("CustomerConversations", fields: [customerId], references: [id])
  customerId Int
  seller    User     @relation("SellerConversations", fields: [sellerId], references: [id])
  sellerId  Int
  product   Product? @relation(fields: [productId], references: [id])
  productId Int?
  subject   String?  // Optional subject line
  status    String   @default("active") // active, archived, blocked
  messages  Message[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([customerId, sellerId, productId])
  @@index([customerId])
  @@index([sellerId])
  @@index([productId])
}

model Message {
  id             Int         @id @default(autoincrement())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId Int
  sender         User        @relation(fields: [senderId], references: [id])
  senderId       Int
  content        String
  messageType    String      @default("text") // text, image, file
  fileUrl        String?     // For images/files
  isRead         Boolean     @default(false)
  createdAt      DateTime    @default(now())

  @@index([conversationId])
  @@index([senderId])
  @@index([createdAt])
}
